// Prisma Schema for Klassenbuch Production Database
// DSGVO-compliant: Only first names, minimal data storage

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  role         Role     @default(TEACHER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  courses              Course[]
  events               BehaviorEvent[]
  redemptions          RewardRedemption[]
  consequenceApplied   ConsequenceApplication[]
  
  @@map("users")
}

enum Role {
  TEACHER
  CO_TEACHER
  ADMIN
}

// Course Management
model Course {
  id         String   @id @default(uuid())
  teacherId  String   @map("teacher_id")
  name       String
  subject    String
  schoolYear String   @map("school_year")
  settings   Json     @default("{}")
  archived   Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  teacher      User                     @relation(fields: [teacherId], references: [id])
  students     Student[]
  events       BehaviorEvent[]
  redemptions  RewardRedemption[]
  applications ConsequenceApplication[]

  @@index([teacherId])
  @@map("courses")
}

// Student Management (DSGVO-compliant)
model Student {
  id           String   @id @default(uuid())
  courseId     String   @map("course_id")
  displayName  String   @map("display_name") // Only first name
  internalCode String   @unique @map("internal_code") // Anonymous identifier
  avatarEmoji  String?  @map("avatar_emoji")
  currentColor Color    @default(GREEN) @map("current_color")
  currentLevel Int      @default(0) @map("current_level")
  currentXP    Int      @default(50) @map("current_xp")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  course       Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  events       BehaviorEvent[]
  redemptions  RewardRedemption[]
  consequences ConsequenceApplication[]

  @@index([courseId])
  @@index([internalCode])
  @@map("students")
}

enum Color {
  BLUE
  GREEN
  YELLOW
  RED
}

// Behavior Events (Append-only, event sourcing)
model BehaviorEvent {
  id        String      @id @default(uuid())
  studentId String      @map("student_id")
  courseId  String      @map("course_id")
  type      EventType
  payload   Json        // Event-specific data
  notes     String?
  createdBy String      @map("created_by")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator User    @relation(fields: [createdBy], references: [id])

  @@index([studentId, createdAt(sort: Desc)])
  @@index([courseId, createdAt(sort: Desc)])
  @@map("behavior_events")
}

enum EventType {
  COLOR_CHANGE
  LEVEL_CHANGE
  XP_CHANGE
  REWARD_REDEEMED
  CONSEQUENCE_APPLIED
  AUTO_RULE
  MANUAL_ACTION
}

// Rewards System (School-wide)
model Reward {
  id          String   @id @default(uuid())
  name        String
  description String?
  costXP      Int?     @map("cost_xp")
  costLevel   Int?     @map("cost_level")
  weeklyLimit Int?     @map("weekly_limit")
  category    String
  emoji       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  redemptions RewardRedemption[]

  @@index([active])
  @@map("rewards")
}

model RewardRedemption {
  id         String   @id @default(uuid())
  rewardId   String   @map("reward_id")
  studentId  String   @map("student_id")
  courseId   String   @map("course_id")
  redeemedBy String   @map("redeemed_by")
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  reward   Reward  @relation(fields: [rewardId], references: [id])
  student  Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  redeemer User    @relation(fields: [redeemedBy], references: [id])

  @@index([studentId, createdAt(sort: Desc)])
  @@index([courseId, createdAt(sort: Desc)])
  @@map("reward_redemptions")
}

// Consequences System (School-wide)
model Consequence {
  id            String            @id @default(uuid())
  name          String
  description   String?
  severity      ConsequenceSeverity
  notesRequired Boolean           @default(false) @map("notes_required")
  emoji         String?
  active        Boolean           @default(true)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  // Relations
  applications ConsequenceApplication[]

  @@index([active])
  @@map("consequences")
}

enum ConsequenceSeverity {
  MINOR
  MODERATE
  MAJOR
}

model ConsequenceApplication {
  id            String   @id @default(uuid())
  consequenceId String   @map("consequence_id")
  studentId     String   @map("student_id")
  courseId      String   @map("course_id")
  appliedBy     String   @map("applied_by")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  consequence Consequence @relation(fields: [consequenceId], references: [id])
  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  applier     User        @relation(fields: [appliedBy], references: [id])

  @@index([studentId, createdAt(sort: Desc)])
  @@index([courseId, createdAt(sort: Desc)])
  @@map("consequence_applications")
}

// Reports (for caching generated reports)
model Report {
  id          String     @id @default(uuid())
  courseId    String?    @map("course_id")
  studentId   String?    @map("student_id")
  type        ReportType
  periodStart DateTime   @map("period_start")
  periodEnd   DateTime   @map("period_end")
  data        Json       // Aggregated report data
  pdfUrl      String?    @map("pdf_url")
  createdAt   DateTime   @default(now()) @map("created_at")
  expiresAt   DateTime   @map("expires_at")

  @@index([courseId, type, createdAt(sort: Desc)])
  @@index([studentId, type, createdAt(sort: Desc)])
  @@map("reports")
}

enum ReportType {
  STUDENT_REPORT
  COURSE_REPORT
  TEACHER_DASHBOARD
}

// Audit Log (for DSGVO compliance)
model AuditLog {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  action     String
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  metadata   Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt(sort: Desc)])
  @@index([entityType, entityId, createdAt(sort: Desc)])
  @@map("audit_logs")
}
